// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "user.pb.h"
#include "log.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTestSendImpl();
void InitDefaultsTestSend();
void InitDefaultsTestReceiveImpl();
void InitDefaultsTestReceive();
void InitDefaultsTestSendArrayImpl();
void InitDefaultsTestSendArray();
void InitDefaultsTestSendMsgImpl();
void InitDefaultsTestSendMsg();
void InitDefaultsTestSendArrayMsgImpl();
void InitDefaultsTestSendArrayMsg();
void InitDefaultsTestImportImpl();
void InitDefaultsTestImport();
void InitDefaultsTestmessageImpl();
void InitDefaultsTestmessage();
inline void InitDefaults() {
  InitDefaultsTestSend();
  InitDefaultsTestReceive();
  InitDefaultsTestSendArray();
  InitDefaultsTestSendMsg();
  InitDefaultsTestSendArrayMsg();
  InitDefaultsTestImport();
  InitDefaultsTestmessage();
}
}  // namespace protobuf_test_2eproto
namespace zxtest {
namespace prototest {
class TestImport;
class TestImportDefaultTypeInternal;
extern TestImportDefaultTypeInternal _TestImport_default_instance_;
class TestReceive;
class TestReceiveDefaultTypeInternal;
extern TestReceiveDefaultTypeInternal _TestReceive_default_instance_;
class TestSend;
class TestSendDefaultTypeInternal;
extern TestSendDefaultTypeInternal _TestSend_default_instance_;
class TestSendArray;
class TestSendArrayDefaultTypeInternal;
extern TestSendArrayDefaultTypeInternal _TestSendArray_default_instance_;
class TestSendArrayMsg;
class TestSendArrayMsgDefaultTypeInternal;
extern TestSendArrayMsgDefaultTypeInternal _TestSendArrayMsg_default_instance_;
class TestSendMsg;
class TestSendMsgDefaultTypeInternal;
extern TestSendMsgDefaultTypeInternal _TestSendMsg_default_instance_;
class Testmessage;
class TestmessageDefaultTypeInternal;
extern TestmessageDefaultTypeInternal _Testmessage_default_instance_;
}  // namespace prototest
}  // namespace zxtest
namespace google {
namespace protobuf {
template<> ::zxtest::prototest::TestImport* Arena::Create< ::zxtest::prototest::TestImport>(Arena*);
template<> ::zxtest::prototest::TestReceive* Arena::Create< ::zxtest::prototest::TestReceive>(Arena*);
template<> ::zxtest::prototest::TestSend* Arena::Create< ::zxtest::prototest::TestSend>(Arena*);
template<> ::zxtest::prototest::TestSendArray* Arena::Create< ::zxtest::prototest::TestSendArray>(Arena*);
template<> ::zxtest::prototest::TestSendArrayMsg* Arena::Create< ::zxtest::prototest::TestSendArrayMsg>(Arena*);
template<> ::zxtest::prototest::TestSendMsg* Arena::Create< ::zxtest::prototest::TestSendMsg>(Arena*);
template<> ::zxtest::prototest::Testmessage* Arena::Create< ::zxtest::prototest::Testmessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zxtest {
namespace prototest {

enum Recode {
  SUCCESS = 0,
  ERROR = 1,
  Recode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Recode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Recode_IsValid(int value);
const Recode Recode_MIN = SUCCESS;
const Recode Recode_MAX = ERROR;
const int Recode_ARRAYSIZE = Recode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Recode_descriptor();
inline const ::std::string& Recode_Name(Recode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Recode_descriptor(), value);
}
inline bool Recode_Parse(
    const ::std::string& name, Recode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Recode>(
    Recode_descriptor(), name, value);
}
// ===================================================================

class TestSend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zxtest.prototest.TestSend) */ {
 public:
  TestSend();
  virtual ~TestSend();

  TestSend(const TestSend& from);

  inline TestSend& operator=(const TestSend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestSend(TestSend&& from) noexcept
    : TestSend() {
    *this = ::std::move(from);
  }

  inline TestSend& operator=(TestSend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestSend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestSend* internal_default_instance() {
    return reinterpret_cast<const TestSend*>(
               &_TestSend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TestSend* other);
  friend void swap(TestSend& a, TestSend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestSend* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestSend>(NULL);
  }

  TestSend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestSend>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestSend& from);
  void MergeFrom(const TestSend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestSend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sname = 1;
  void clear_sname();
  static const int kSnameFieldNumber = 1;
  const ::std::string& sname() const;
  void set_sname(const ::std::string& value);
  #if LANG_CXX11
  void set_sname(::std::string&& value);
  #endif
  void set_sname(const char* value);
  void set_sname(const char* value, size_t size);
  ::std::string* mutable_sname();
  ::std::string* release_sname();
  void set_allocated_sname(::std::string* sname);

  // uint32 u32number = 2;
  void clear_u32number();
  static const int kU32NumberFieldNumber = 2;
  ::google::protobuf::uint32 u32number() const;
  void set_u32number(::google::protobuf::uint32 value);

  // bool isSerializeArray = 3;
  void clear_isserializearray();
  static const int kIsSerializeArrayFieldNumber = 3;
  bool isserializearray() const;
  void set_isserializearray(bool value);

  // @@protoc_insertion_point(class_scope:zxtest.prototest.TestSend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sname_;
  ::google::protobuf::uint32 u32number_;
  bool isserializearray_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsTestSendImpl();
};
// -------------------------------------------------------------------

class TestReceive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zxtest.prototest.TestReceive) */ {
 public:
  TestReceive();
  virtual ~TestReceive();

  TestReceive(const TestReceive& from);

  inline TestReceive& operator=(const TestReceive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestReceive(TestReceive&& from) noexcept
    : TestReceive() {
    *this = ::std::move(from);
  }

  inline TestReceive& operator=(TestReceive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestReceive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestReceive* internal_default_instance() {
    return reinterpret_cast<const TestReceive*>(
               &_TestReceive_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TestReceive* other);
  friend void swap(TestReceive& a, TestReceive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestReceive* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestReceive>(NULL);
  }

  TestReceive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestReceive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestReceive& from);
  void MergeFrom(const TestReceive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestReceive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string srename = 2;
  void clear_srename();
  static const int kSrenameFieldNumber = 2;
  const ::std::string& srename() const;
  void set_srename(const ::std::string& value);
  #if LANG_CXX11
  void set_srename(::std::string&& value);
  #endif
  void set_srename(const char* value);
  void set_srename(const char* value, size_t size);
  ::std::string* mutable_srename();
  ::std::string* release_srename();
  void set_allocated_srename(::std::string* srename);

  // .zxtest.prototest.Recode enumcode = 1;
  void clear_enumcode();
  static const int kEnumcodeFieldNumber = 1;
  ::zxtest::prototest::Recode enumcode() const;
  void set_enumcode(::zxtest::prototest::Recode value);

  // @@protoc_insertion_point(class_scope:zxtest.prototest.TestReceive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr srename_;
  int enumcode_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsTestReceiveImpl();
};
// -------------------------------------------------------------------

class TestSendArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zxtest.prototest.TestSendArray) */ {
 public:
  TestSendArray();
  virtual ~TestSendArray();

  TestSendArray(const TestSendArray& from);

  inline TestSendArray& operator=(const TestSendArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestSendArray(TestSendArray&& from) noexcept
    : TestSendArray() {
    *this = ::std::move(from);
  }

  inline TestSendArray& operator=(TestSendArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestSendArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestSendArray* internal_default_instance() {
    return reinterpret_cast<const TestSendArray*>(
               &_TestSendArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TestSendArray* other);
  friend void swap(TestSendArray& a, TestSendArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestSendArray* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestSendArray>(NULL);
  }

  TestSendArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestSendArray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestSendArray& from);
  void MergeFrom(const TestSendArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestSendArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 u32number = 2;
  int u32number_size() const;
  void clear_u32number();
  static const int kU32NumberFieldNumber = 2;
  ::google::protobuf::uint32 u32number(int index) const;
  void set_u32number(int index, ::google::protobuf::uint32 value);
  void add_u32number(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      u32number() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_u32number();

  // repeated string usernames_array = 3;
  int usernames_array_size() const;
  void clear_usernames_array();
  static const int kUsernamesArrayFieldNumber = 3;
  const ::std::string& usernames_array(int index) const;
  ::std::string* mutable_usernames_array(int index);
  void set_usernames_array(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_usernames_array(int index, ::std::string&& value);
  #endif
  void set_usernames_array(int index, const char* value);
  void set_usernames_array(int index, const char* value, size_t size);
  ::std::string* add_usernames_array();
  void add_usernames_array(const ::std::string& value);
  #if LANG_CXX11
  void add_usernames_array(::std::string&& value);
  #endif
  void add_usernames_array(const char* value);
  void add_usernames_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& usernames_array() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_usernames_array();

  // string sname = 1;
  void clear_sname();
  static const int kSnameFieldNumber = 1;
  const ::std::string& sname() const;
  void set_sname(const ::std::string& value);
  #if LANG_CXX11
  void set_sname(::std::string&& value);
  #endif
  void set_sname(const char* value);
  void set_sname(const char* value, size_t size);
  ::std::string* mutable_sname();
  ::std::string* release_sname();
  void set_allocated_sname(::std::string* sname);

  // @@protoc_insertion_point(class_scope:zxtest.prototest.TestSendArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > u32number_;
  mutable int _u32number_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> usernames_array_;
  ::google::protobuf::internal::ArenaStringPtr sname_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsTestSendArrayImpl();
};
// -------------------------------------------------------------------

class TestSendMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zxtest.prototest.TestSendMsg) */ {
 public:
  TestSendMsg();
  virtual ~TestSendMsg();

  TestSendMsg(const TestSendMsg& from);

  inline TestSendMsg& operator=(const TestSendMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestSendMsg(TestSendMsg&& from) noexcept
    : TestSendMsg() {
    *this = ::std::move(from);
  }

  inline TestSendMsg& operator=(TestSendMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestSendMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestSendMsg* internal_default_instance() {
    return reinterpret_cast<const TestSendMsg*>(
               &_TestSendMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TestSendMsg* other);
  friend void swap(TestSendMsg& a, TestSendMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestSendMsg* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestSendMsg>(NULL);
  }

  TestSendMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestSendMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestSendMsg& from);
  void MergeFrom(const TestSendMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestSendMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsg_name = 1;
  void clear_smsg_name();
  static const int kSMsgNameFieldNumber = 1;
  const ::std::string& smsg_name() const;
  void set_smsg_name(const ::std::string& value);
  #if LANG_CXX11
  void set_smsg_name(::std::string&& value);
  #endif
  void set_smsg_name(const char* value);
  void set_smsg_name(const char* value, size_t size);
  ::std::string* mutable_smsg_name();
  ::std::string* release_smsg_name();
  void set_allocated_smsg_name(::std::string* smsg_name);

  // .zxtest.prototest.TestSendArray Msg_info = 2;
  bool has_msg_info() const;
  void clear_msg_info();
  static const int kMsgInfoFieldNumber = 2;
  const ::zxtest::prototest::TestSendArray& msg_info() const;
  ::zxtest::prototest::TestSendArray* release_msg_info();
  ::zxtest::prototest::TestSendArray* mutable_msg_info();
  void set_allocated_msg_info(::zxtest::prototest::TestSendArray* msg_info);

  // @@protoc_insertion_point(class_scope:zxtest.prototest.TestSendMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsg_name_;
  ::zxtest::prototest::TestSendArray* msg_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsTestSendMsgImpl();
};
// -------------------------------------------------------------------

class TestSendArrayMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zxtest.prototest.TestSendArrayMsg) */ {
 public:
  TestSendArrayMsg();
  virtual ~TestSendArrayMsg();

  TestSendArrayMsg(const TestSendArrayMsg& from);

  inline TestSendArrayMsg& operator=(const TestSendArrayMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestSendArrayMsg(TestSendArrayMsg&& from) noexcept
    : TestSendArrayMsg() {
    *this = ::std::move(from);
  }

  inline TestSendArrayMsg& operator=(TestSendArrayMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestSendArrayMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestSendArrayMsg* internal_default_instance() {
    return reinterpret_cast<const TestSendArrayMsg*>(
               &_TestSendArrayMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TestSendArrayMsg* other);
  friend void swap(TestSendArrayMsg& a, TestSendArrayMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestSendArrayMsg* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestSendArrayMsg>(NULL);
  }

  TestSendArrayMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestSendArrayMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestSendArrayMsg& from);
  void MergeFrom(const TestSendArrayMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestSendArrayMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zxtest.prototest.TestSendArray Msg_array = 2;
  int msg_array_size() const;
  void clear_msg_array();
  static const int kMsgArrayFieldNumber = 2;
  ::zxtest::prototest::TestSendArray* mutable_msg_array(int index);
  ::google::protobuf::RepeatedPtrField< ::zxtest::prototest::TestSendArray >*
      mutable_msg_array();
  const ::zxtest::prototest::TestSendArray& msg_array(int index) const;
  ::zxtest::prototest::TestSendArray* add_msg_array();
  const ::google::protobuf::RepeatedPtrField< ::zxtest::prototest::TestSendArray >&
      msg_array() const;

  // string sMsg_name = 1;
  void clear_smsg_name();
  static const int kSMsgNameFieldNumber = 1;
  const ::std::string& smsg_name() const;
  void set_smsg_name(const ::std::string& value);
  #if LANG_CXX11
  void set_smsg_name(::std::string&& value);
  #endif
  void set_smsg_name(const char* value);
  void set_smsg_name(const char* value, size_t size);
  ::std::string* mutable_smsg_name();
  ::std::string* release_smsg_name();
  void set_allocated_smsg_name(::std::string* smsg_name);

  // @@protoc_insertion_point(class_scope:zxtest.prototest.TestSendArrayMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zxtest::prototest::TestSendArray > msg_array_;
  ::google::protobuf::internal::ArenaStringPtr smsg_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsTestSendArrayMsgImpl();
};
// -------------------------------------------------------------------

class TestImport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zxtest.prototest.TestImport) */ {
 public:
  TestImport();
  virtual ~TestImport();

  TestImport(const TestImport& from);

  inline TestImport& operator=(const TestImport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestImport(TestImport&& from) noexcept
    : TestImport() {
    *this = ::std::move(from);
  }

  inline TestImport& operator=(TestImport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestImport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestImport* internal_default_instance() {
    return reinterpret_cast<const TestImport*>(
               &_TestImport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TestImport* other);
  friend void swap(TestImport& a, TestImport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestImport* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestImport>(NULL);
  }

  TestImport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TestImport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestImport& from);
  void MergeFrom(const TestImport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestImport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sImport_name = 1;
  void clear_simport_name();
  static const int kSImportNameFieldNumber = 1;
  const ::std::string& simport_name() const;
  void set_simport_name(const ::std::string& value);
  #if LANG_CXX11
  void set_simport_name(::std::string&& value);
  #endif
  void set_simport_name(const char* value);
  void set_simport_name(const char* value, size_t size);
  ::std::string* mutable_simport_name();
  ::std::string* release_simport_name();
  void set_allocated_simport_name(::std::string* simport_name);

  // .zxtest.user.UserInfo userinfo = 2;
  bool has_userinfo() const;
  void clear_userinfo();
  static const int kUserinfoFieldNumber = 2;
  const ::zxtest::user::UserInfo& userinfo() const;
  ::zxtest::user::UserInfo* release_userinfo();
  ::zxtest::user::UserInfo* mutable_userinfo();
  void set_allocated_userinfo(::zxtest::user::UserInfo* userinfo);

  // .zxtest.log.SendLog Log = 3;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 3;
  const ::zxtest::log::SendLog& log() const;
  ::zxtest::log::SendLog* release_log();
  ::zxtest::log::SendLog* mutable_log();
  void set_allocated_log(::zxtest::log::SendLog* log);

  // @@protoc_insertion_point(class_scope:zxtest.prototest.TestImport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr simport_name_;
  ::zxtest::user::UserInfo* userinfo_;
  ::zxtest::log::SendLog* log_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsTestImportImpl();
};
// -------------------------------------------------------------------

class Testmessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zxtest.prototest.Testmessage) */ {
 public:
  Testmessage();
  virtual ~Testmessage();

  Testmessage(const Testmessage& from);

  inline Testmessage& operator=(const Testmessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Testmessage(Testmessage&& from) noexcept
    : Testmessage() {
    *this = ::std::move(from);
  }

  inline Testmessage& operator=(Testmessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Testmessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Testmessage* internal_default_instance() {
    return reinterpret_cast<const Testmessage*>(
               &_Testmessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Testmessage* other);
  friend void swap(Testmessage& a, Testmessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Testmessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Testmessage>(NULL);
  }

  Testmessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Testmessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Testmessage& from);
  void MergeFrom(const Testmessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Testmessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 u32number = 3;
  int u32number_size() const;
  void clear_u32number();
  static const int kU32NumberFieldNumber = 3;
  ::google::protobuf::uint32 u32number(int index) const;
  void set_u32number(int index, ::google::protobuf::uint32 value);
  void add_u32number(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      u32number() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_u32number();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .zxtest.prototest.TestSendArray Msg_array = 4;
  bool has_msg_array() const;
  void clear_msg_array();
  static const int kMsgArrayFieldNumber = 4;
  const ::zxtest::prototest::TestSendArray& msg_array() const;
  ::zxtest::prototest::TestSendArray* release_msg_array();
  ::zxtest::prototest::TestSendArray* mutable_msg_array();
  void set_allocated_msg_array(::zxtest::prototest::TestSendArray* msg_array);

  // .zxtest.user.UserInfo info = 5;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 5;
  const ::zxtest::user::UserInfo& info() const;
  ::zxtest::user::UserInfo* release_info();
  ::zxtest::user::UserInfo* mutable_info();
  void set_allocated_info(::zxtest::user::UserInfo* info);

  // .zxtest.prototest.Recode enumcode = 2;
  void clear_enumcode();
  static const int kEnumcodeFieldNumber = 2;
  ::zxtest::prototest::Recode enumcode() const;
  void set_enumcode(::zxtest::prototest::Recode value);

  // @@protoc_insertion_point(class_scope:zxtest.prototest.Testmessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > u32number_;
  mutable int _u32number_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::zxtest::prototest::TestSendArray* msg_array_;
  ::zxtest::user::UserInfo* info_;
  int enumcode_;
  mutable int _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsTestmessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestSend

// string sname = 1;
inline void TestSend::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestSend::sname() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSend.sname)
  return sname_.GetNoArena();
}
inline void TestSend::set_sname(const ::std::string& value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestSend.sname)
}
#if LANG_CXX11
inline void TestSend::set_sname(::std::string&& value) {
  
  sname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zxtest.prototest.TestSend.sname)
}
#endif
inline void TestSend::set_sname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zxtest.prototest.TestSend.sname)
}
inline void TestSend::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zxtest.prototest.TestSend.sname)
}
inline ::std::string* TestSend::mutable_sname() {
  
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestSend.sname)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestSend::release_sname() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.TestSend.sname)
  
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestSend::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.TestSend.sname)
}

// uint32 u32number = 2;
inline void TestSend::clear_u32number() {
  u32number_ = 0u;
}
inline ::google::protobuf::uint32 TestSend::u32number() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSend.u32number)
  return u32number_;
}
inline void TestSend::set_u32number(::google::protobuf::uint32 value) {
  
  u32number_ = value;
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestSend.u32number)
}

// bool isSerializeArray = 3;
inline void TestSend::clear_isserializearray() {
  isserializearray_ = false;
}
inline bool TestSend::isserializearray() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSend.isSerializeArray)
  return isserializearray_;
}
inline void TestSend::set_isserializearray(bool value) {
  
  isserializearray_ = value;
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestSend.isSerializeArray)
}

// -------------------------------------------------------------------

// TestReceive

// .zxtest.prototest.Recode enumcode = 1;
inline void TestReceive::clear_enumcode() {
  enumcode_ = 0;
}
inline ::zxtest::prototest::Recode TestReceive::enumcode() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestReceive.enumcode)
  return static_cast< ::zxtest::prototest::Recode >(enumcode_);
}
inline void TestReceive::set_enumcode(::zxtest::prototest::Recode value) {
  
  enumcode_ = value;
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestReceive.enumcode)
}

// string srename = 2;
inline void TestReceive::clear_srename() {
  srename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestReceive::srename() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestReceive.srename)
  return srename_.GetNoArena();
}
inline void TestReceive::set_srename(const ::std::string& value) {
  
  srename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestReceive.srename)
}
#if LANG_CXX11
inline void TestReceive::set_srename(::std::string&& value) {
  
  srename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zxtest.prototest.TestReceive.srename)
}
#endif
inline void TestReceive::set_srename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  srename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zxtest.prototest.TestReceive.srename)
}
inline void TestReceive::set_srename(const char* value, size_t size) {
  
  srename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zxtest.prototest.TestReceive.srename)
}
inline ::std::string* TestReceive::mutable_srename() {
  
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestReceive.srename)
  return srename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestReceive::release_srename() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.TestReceive.srename)
  
  return srename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestReceive::set_allocated_srename(::std::string* srename) {
  if (srename != NULL) {
    
  } else {
    
  }
  srename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srename);
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.TestReceive.srename)
}

// -------------------------------------------------------------------

// TestSendArray

// string sname = 1;
inline void TestSendArray::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestSendArray::sname() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSendArray.sname)
  return sname_.GetNoArena();
}
inline void TestSendArray::set_sname(const ::std::string& value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestSendArray.sname)
}
#if LANG_CXX11
inline void TestSendArray::set_sname(::std::string&& value) {
  
  sname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zxtest.prototest.TestSendArray.sname)
}
#endif
inline void TestSendArray::set_sname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zxtest.prototest.TestSendArray.sname)
}
inline void TestSendArray::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zxtest.prototest.TestSendArray.sname)
}
inline ::std::string* TestSendArray::mutable_sname() {
  
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestSendArray.sname)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestSendArray::release_sname() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.TestSendArray.sname)
  
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestSendArray::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.TestSendArray.sname)
}

// repeated uint32 u32number = 2;
inline int TestSendArray::u32number_size() const {
  return u32number_.size();
}
inline void TestSendArray::clear_u32number() {
  u32number_.Clear();
}
inline ::google::protobuf::uint32 TestSendArray::u32number(int index) const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSendArray.u32number)
  return u32number_.Get(index);
}
inline void TestSendArray::set_u32number(int index, ::google::protobuf::uint32 value) {
  u32number_.Set(index, value);
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestSendArray.u32number)
}
inline void TestSendArray::add_u32number(::google::protobuf::uint32 value) {
  u32number_.Add(value);
  // @@protoc_insertion_point(field_add:zxtest.prototest.TestSendArray.u32number)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestSendArray::u32number() const {
  // @@protoc_insertion_point(field_list:zxtest.prototest.TestSendArray.u32number)
  return u32number_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestSendArray::mutable_u32number() {
  // @@protoc_insertion_point(field_mutable_list:zxtest.prototest.TestSendArray.u32number)
  return &u32number_;
}

// repeated string usernames_array = 3;
inline int TestSendArray::usernames_array_size() const {
  return usernames_array_.size();
}
inline void TestSendArray::clear_usernames_array() {
  usernames_array_.Clear();
}
inline const ::std::string& TestSendArray::usernames_array(int index) const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSendArray.usernames_array)
  return usernames_array_.Get(index);
}
inline ::std::string* TestSendArray::mutable_usernames_array(int index) {
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestSendArray.usernames_array)
  return usernames_array_.Mutable(index);
}
inline void TestSendArray::set_usernames_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestSendArray.usernames_array)
  usernames_array_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestSendArray::set_usernames_array(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestSendArray.usernames_array)
  usernames_array_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestSendArray::set_usernames_array(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  usernames_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zxtest.prototest.TestSendArray.usernames_array)
}
inline void TestSendArray::set_usernames_array(int index, const char* value, size_t size) {
  usernames_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zxtest.prototest.TestSendArray.usernames_array)
}
inline ::std::string* TestSendArray::add_usernames_array() {
  // @@protoc_insertion_point(field_add_mutable:zxtest.prototest.TestSendArray.usernames_array)
  return usernames_array_.Add();
}
inline void TestSendArray::add_usernames_array(const ::std::string& value) {
  usernames_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zxtest.prototest.TestSendArray.usernames_array)
}
#if LANG_CXX11
inline void TestSendArray::add_usernames_array(::std::string&& value) {
  usernames_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zxtest.prototest.TestSendArray.usernames_array)
}
#endif
inline void TestSendArray::add_usernames_array(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  usernames_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zxtest.prototest.TestSendArray.usernames_array)
}
inline void TestSendArray::add_usernames_array(const char* value, size_t size) {
  usernames_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zxtest.prototest.TestSendArray.usernames_array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestSendArray::usernames_array() const {
  // @@protoc_insertion_point(field_list:zxtest.prototest.TestSendArray.usernames_array)
  return usernames_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestSendArray::mutable_usernames_array() {
  // @@protoc_insertion_point(field_mutable_list:zxtest.prototest.TestSendArray.usernames_array)
  return &usernames_array_;
}

// -------------------------------------------------------------------

// TestSendMsg

// string sMsg_name = 1;
inline void TestSendMsg::clear_smsg_name() {
  smsg_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestSendMsg::smsg_name() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSendMsg.sMsg_name)
  return smsg_name_.GetNoArena();
}
inline void TestSendMsg::set_smsg_name(const ::std::string& value) {
  
  smsg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestSendMsg.sMsg_name)
}
#if LANG_CXX11
inline void TestSendMsg::set_smsg_name(::std::string&& value) {
  
  smsg_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zxtest.prototest.TestSendMsg.sMsg_name)
}
#endif
inline void TestSendMsg::set_smsg_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zxtest.prototest.TestSendMsg.sMsg_name)
}
inline void TestSendMsg::set_smsg_name(const char* value, size_t size) {
  
  smsg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zxtest.prototest.TestSendMsg.sMsg_name)
}
inline ::std::string* TestSendMsg::mutable_smsg_name() {
  
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestSendMsg.sMsg_name)
  return smsg_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestSendMsg::release_smsg_name() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.TestSendMsg.sMsg_name)
  
  return smsg_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestSendMsg::set_allocated_smsg_name(::std::string* smsg_name) {
  if (smsg_name != NULL) {
    
  } else {
    
  }
  smsg_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsg_name);
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.TestSendMsg.sMsg_name)
}

// .zxtest.prototest.TestSendArray Msg_info = 2;
inline bool TestSendMsg::has_msg_info() const {
  return this != internal_default_instance() && msg_info_ != NULL;
}
inline void TestSendMsg::clear_msg_info() {
  if (GetArenaNoVirtual() == NULL && msg_info_ != NULL) {
    delete msg_info_;
  }
  msg_info_ = NULL;
}
inline const ::zxtest::prototest::TestSendArray& TestSendMsg::msg_info() const {
  const ::zxtest::prototest::TestSendArray* p = msg_info_;
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSendMsg.Msg_info)
  return p != NULL ? *p : *reinterpret_cast<const ::zxtest::prototest::TestSendArray*>(
      &::zxtest::prototest::_TestSendArray_default_instance_);
}
inline ::zxtest::prototest::TestSendArray* TestSendMsg::release_msg_info() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.TestSendMsg.Msg_info)
  
  ::zxtest::prototest::TestSendArray* temp = msg_info_;
  msg_info_ = NULL;
  return temp;
}
inline ::zxtest::prototest::TestSendArray* TestSendMsg::mutable_msg_info() {
  
  if (msg_info_ == NULL) {
    msg_info_ = ::google::protobuf::Arena::Create< ::zxtest::prototest::TestSendArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestSendMsg.Msg_info)
  return msg_info_;
}
inline void TestSendMsg::set_allocated_msg_info(::zxtest::prototest::TestSendArray* msg_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msg_info_;
  }
  if (msg_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg_info, submessage_arena);
    }
    
  } else {
    
  }
  msg_info_ = msg_info;
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.TestSendMsg.Msg_info)
}

// -------------------------------------------------------------------

// TestSendArrayMsg

// string sMsg_name = 1;
inline void TestSendArrayMsg::clear_smsg_name() {
  smsg_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestSendArrayMsg::smsg_name() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSendArrayMsg.sMsg_name)
  return smsg_name_.GetNoArena();
}
inline void TestSendArrayMsg::set_smsg_name(const ::std::string& value) {
  
  smsg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestSendArrayMsg.sMsg_name)
}
#if LANG_CXX11
inline void TestSendArrayMsg::set_smsg_name(::std::string&& value) {
  
  smsg_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zxtest.prototest.TestSendArrayMsg.sMsg_name)
}
#endif
inline void TestSendArrayMsg::set_smsg_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zxtest.prototest.TestSendArrayMsg.sMsg_name)
}
inline void TestSendArrayMsg::set_smsg_name(const char* value, size_t size) {
  
  smsg_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zxtest.prototest.TestSendArrayMsg.sMsg_name)
}
inline ::std::string* TestSendArrayMsg::mutable_smsg_name() {
  
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestSendArrayMsg.sMsg_name)
  return smsg_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestSendArrayMsg::release_smsg_name() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.TestSendArrayMsg.sMsg_name)
  
  return smsg_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestSendArrayMsg::set_allocated_smsg_name(::std::string* smsg_name) {
  if (smsg_name != NULL) {
    
  } else {
    
  }
  smsg_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsg_name);
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.TestSendArrayMsg.sMsg_name)
}

// repeated .zxtest.prototest.TestSendArray Msg_array = 2;
inline int TestSendArrayMsg::msg_array_size() const {
  return msg_array_.size();
}
inline void TestSendArrayMsg::clear_msg_array() {
  msg_array_.Clear();
}
inline ::zxtest::prototest::TestSendArray* TestSendArrayMsg::mutable_msg_array(int index) {
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestSendArrayMsg.Msg_array)
  return msg_array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::zxtest::prototest::TestSendArray >*
TestSendArrayMsg::mutable_msg_array() {
  // @@protoc_insertion_point(field_mutable_list:zxtest.prototest.TestSendArrayMsg.Msg_array)
  return &msg_array_;
}
inline const ::zxtest::prototest::TestSendArray& TestSendArrayMsg::msg_array(int index) const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestSendArrayMsg.Msg_array)
  return msg_array_.Get(index);
}
inline ::zxtest::prototest::TestSendArray* TestSendArrayMsg::add_msg_array() {
  // @@protoc_insertion_point(field_add:zxtest.prototest.TestSendArrayMsg.Msg_array)
  return msg_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::zxtest::prototest::TestSendArray >&
TestSendArrayMsg::msg_array() const {
  // @@protoc_insertion_point(field_list:zxtest.prototest.TestSendArrayMsg.Msg_array)
  return msg_array_;
}

// -------------------------------------------------------------------

// TestImport

// string sImport_name = 1;
inline void TestImport::clear_simport_name() {
  simport_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestImport::simport_name() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestImport.sImport_name)
  return simport_name_.GetNoArena();
}
inline void TestImport::set_simport_name(const ::std::string& value) {
  
  simport_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zxtest.prototest.TestImport.sImport_name)
}
#if LANG_CXX11
inline void TestImport::set_simport_name(::std::string&& value) {
  
  simport_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zxtest.prototest.TestImport.sImport_name)
}
#endif
inline void TestImport::set_simport_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  simport_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zxtest.prototest.TestImport.sImport_name)
}
inline void TestImport::set_simport_name(const char* value, size_t size) {
  
  simport_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zxtest.prototest.TestImport.sImport_name)
}
inline ::std::string* TestImport::mutable_simport_name() {
  
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestImport.sImport_name)
  return simport_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestImport::release_simport_name() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.TestImport.sImport_name)
  
  return simport_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestImport::set_allocated_simport_name(::std::string* simport_name) {
  if (simport_name != NULL) {
    
  } else {
    
  }
  simport_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), simport_name);
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.TestImport.sImport_name)
}

// .zxtest.user.UserInfo userinfo = 2;
inline bool TestImport::has_userinfo() const {
  return this != internal_default_instance() && userinfo_ != NULL;
}
inline const ::zxtest::user::UserInfo& TestImport::userinfo() const {
  const ::zxtest::user::UserInfo* p = userinfo_;
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestImport.userinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::zxtest::user::UserInfo*>(
      &::zxtest::user::_UserInfo_default_instance_);
}
inline ::zxtest::user::UserInfo* TestImport::release_userinfo() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.TestImport.userinfo)
  
  ::zxtest::user::UserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline ::zxtest::user::UserInfo* TestImport::mutable_userinfo() {
  
  if (userinfo_ == NULL) {
    userinfo_ = ::google::protobuf::Arena::Create< ::zxtest::user::UserInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestImport.userinfo)
  return userinfo_;
}
inline void TestImport::set_allocated_userinfo(::zxtest::user::UserInfo* userinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(userinfo_);
  }
  if (userinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      userinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.TestImport.userinfo)
}

// .zxtest.log.SendLog Log = 3;
inline bool TestImport::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline const ::zxtest::log::SendLog& TestImport::log() const {
  const ::zxtest::log::SendLog* p = log_;
  // @@protoc_insertion_point(field_get:zxtest.prototest.TestImport.Log)
  return p != NULL ? *p : *reinterpret_cast<const ::zxtest::log::SendLog*>(
      &::zxtest::log::_SendLog_default_instance_);
}
inline ::zxtest::log::SendLog* TestImport::release_log() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.TestImport.Log)
  
  ::zxtest::log::SendLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::zxtest::log::SendLog* TestImport::mutable_log() {
  
  if (log_ == NULL) {
    log_ = ::google::protobuf::Arena::Create< ::zxtest::log::SendLog >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.TestImport.Log)
  return log_;
}
inline void TestImport::set_allocated_log(::zxtest::log::SendLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(log_);
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.TestImport.Log)
}

// -------------------------------------------------------------------

// Testmessage

// string name = 1;
inline void Testmessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Testmessage::name() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.Testmessage.name)
  return name_.GetNoArena();
}
inline void Testmessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zxtest.prototest.Testmessage.name)
}
#if LANG_CXX11
inline void Testmessage::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zxtest.prototest.Testmessage.name)
}
#endif
inline void Testmessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zxtest.prototest.Testmessage.name)
}
inline void Testmessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zxtest.prototest.Testmessage.name)
}
inline ::std::string* Testmessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.Testmessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Testmessage::release_name() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.Testmessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Testmessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.Testmessage.name)
}

// .zxtest.prototest.Recode enumcode = 2;
inline void Testmessage::clear_enumcode() {
  enumcode_ = 0;
}
inline ::zxtest::prototest::Recode Testmessage::enumcode() const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.Testmessage.enumcode)
  return static_cast< ::zxtest::prototest::Recode >(enumcode_);
}
inline void Testmessage::set_enumcode(::zxtest::prototest::Recode value) {
  
  enumcode_ = value;
  // @@protoc_insertion_point(field_set:zxtest.prototest.Testmessage.enumcode)
}

// repeated uint32 u32number = 3;
inline int Testmessage::u32number_size() const {
  return u32number_.size();
}
inline void Testmessage::clear_u32number() {
  u32number_.Clear();
}
inline ::google::protobuf::uint32 Testmessage::u32number(int index) const {
  // @@protoc_insertion_point(field_get:zxtest.prototest.Testmessage.u32number)
  return u32number_.Get(index);
}
inline void Testmessage::set_u32number(int index, ::google::protobuf::uint32 value) {
  u32number_.Set(index, value);
  // @@protoc_insertion_point(field_set:zxtest.prototest.Testmessage.u32number)
}
inline void Testmessage::add_u32number(::google::protobuf::uint32 value) {
  u32number_.Add(value);
  // @@protoc_insertion_point(field_add:zxtest.prototest.Testmessage.u32number)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Testmessage::u32number() const {
  // @@protoc_insertion_point(field_list:zxtest.prototest.Testmessage.u32number)
  return u32number_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Testmessage::mutable_u32number() {
  // @@protoc_insertion_point(field_mutable_list:zxtest.prototest.Testmessage.u32number)
  return &u32number_;
}

// .zxtest.prototest.TestSendArray Msg_array = 4;
inline bool Testmessage::has_msg_array() const {
  return this != internal_default_instance() && msg_array_ != NULL;
}
inline void Testmessage::clear_msg_array() {
  if (GetArenaNoVirtual() == NULL && msg_array_ != NULL) {
    delete msg_array_;
  }
  msg_array_ = NULL;
}
inline const ::zxtest::prototest::TestSendArray& Testmessage::msg_array() const {
  const ::zxtest::prototest::TestSendArray* p = msg_array_;
  // @@protoc_insertion_point(field_get:zxtest.prototest.Testmessage.Msg_array)
  return p != NULL ? *p : *reinterpret_cast<const ::zxtest::prototest::TestSendArray*>(
      &::zxtest::prototest::_TestSendArray_default_instance_);
}
inline ::zxtest::prototest::TestSendArray* Testmessage::release_msg_array() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.Testmessage.Msg_array)
  
  ::zxtest::prototest::TestSendArray* temp = msg_array_;
  msg_array_ = NULL;
  return temp;
}
inline ::zxtest::prototest::TestSendArray* Testmessage::mutable_msg_array() {
  
  if (msg_array_ == NULL) {
    msg_array_ = ::google::protobuf::Arena::Create< ::zxtest::prototest::TestSendArray >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.Testmessage.Msg_array)
  return msg_array_;
}
inline void Testmessage::set_allocated_msg_array(::zxtest::prototest::TestSendArray* msg_array) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msg_array_;
  }
  if (msg_array) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg_array = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg_array, submessage_arena);
    }
    
  } else {
    
  }
  msg_array_ = msg_array;
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.Testmessage.Msg_array)
}

// .zxtest.user.UserInfo info = 5;
inline bool Testmessage::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline const ::zxtest::user::UserInfo& Testmessage::info() const {
  const ::zxtest::user::UserInfo* p = info_;
  // @@protoc_insertion_point(field_get:zxtest.prototest.Testmessage.info)
  return p != NULL ? *p : *reinterpret_cast<const ::zxtest::user::UserInfo*>(
      &::zxtest::user::_UserInfo_default_instance_);
}
inline ::zxtest::user::UserInfo* Testmessage::release_info() {
  // @@protoc_insertion_point(field_release:zxtest.prototest.Testmessage.info)
  
  ::zxtest::user::UserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::zxtest::user::UserInfo* Testmessage::mutable_info() {
  
  if (info_ == NULL) {
    info_ = ::google::protobuf::Arena::Create< ::zxtest::user::UserInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zxtest.prototest.Testmessage.info)
  return info_;
}
inline void Testmessage::set_allocated_info(::zxtest::user::UserInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_);
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:zxtest.prototest.Testmessage.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prototest
}  // namespace zxtest

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zxtest::prototest::Recode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zxtest::prototest::Recode>() {
  return ::zxtest::prototest::Recode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
