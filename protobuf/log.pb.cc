// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#include "log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace zxtest {
namespace log {
class SendLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendLog>
      _instance;
} _SendLog_default_instance_;
}  // namespace log
}  // namespace zxtest
namespace protobuf_log_2eproto {
void InitDefaultsSendLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::zxtest::log::_SendLog_default_instance_;
    new (ptr) ::zxtest::log::SendLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zxtest::log::SendLog::InitAsDefaultInstance();
}

void InitDefaultsSendLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSendLogImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zxtest::log::SendLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zxtest::log::SendLog, sname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zxtest::log::SendLog, log_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zxtest::log::SendLog)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zxtest::log::_SendLog_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "log.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tlog.proto\022\nzxtest.log\"%\n\007SendLog\022\r\n\005sn"
      "ame\030\001 \001(\t\022\013\n\003Log\030\002 \001(\t* \n\006Recode\022\013\n\007SUCC"
      "ESS\020\000\022\t\n\005ERROR\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 104);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_log_2eproto
namespace zxtest {
namespace log {
const ::google::protobuf::EnumDescriptor* Recode_descriptor() {
  protobuf_log_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_log_2eproto::file_level_enum_descriptors[0];
}
bool Recode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SendLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendLog::kSnameFieldNumber;
const int SendLog::kLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendLog::SendLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_log_2eproto::InitDefaultsSendLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zxtest.log.SendLog)
}
SendLog::SendLog(const SendLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sname().size() > 0) {
    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  // @@protoc_insertion_point(copy_constructor:zxtest.log.SendLog)
}

void SendLog::SharedCtor() {
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendLog::~SendLog() {
  // @@protoc_insertion_point(destructor:zxtest.log.SendLog)
  SharedDtor();
}

void SendLog::SharedDtor() {
  sname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendLog::descriptor() {
  ::protobuf_log_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_log_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendLog& SendLog::default_instance() {
  ::protobuf_log_2eproto::InitDefaultsSendLog();
  return *internal_default_instance();
}


void SendLog::Clear() {
// @@protoc_insertion_point(message_clear_start:zxtest.log.SendLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SendLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zxtest.log.SendLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sname().data(), static_cast<int>(this->sname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zxtest.log.SendLog.sname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Log = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), static_cast<int>(this->log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zxtest.log.SendLog.Log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zxtest.log.SendLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zxtest.log.SendLog)
  return false;
#undef DO_
}

void SendLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zxtest.log.SendLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sname = 1;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), static_cast<int>(this->sname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zxtest.log.SendLog.sname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sname(), output);
  }

  // string Log = 2;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zxtest.log.SendLog.Log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->log(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zxtest.log.SendLog)
}

::google::protobuf::uint8* SendLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zxtest.log.SendLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sname = 1;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), static_cast<int>(this->sname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zxtest.log.SendLog.sname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sname(), target);
  }

  // string Log = 2;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zxtest.log.SendLog.Log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->log(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zxtest.log.SendLog)
  return target;
}

size_t SendLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zxtest.log.SendLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sname = 1;
  if (this->sname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sname());
  }

  // string Log = 2;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zxtest.log.SendLog)
  GOOGLE_DCHECK_NE(&from, this);
  const SendLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zxtest.log.SendLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zxtest.log.SendLog)
    MergeFrom(*source);
  }
}

void SendLog::MergeFrom(const SendLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zxtest.log.SendLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sname().size() > 0) {

    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
}

void SendLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zxtest.log.SendLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendLog::CopyFrom(const SendLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zxtest.log.SendLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendLog::IsInitialized() const {
  return true;
}

void SendLog::Swap(SendLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendLog::InternalSwap(SendLog* other) {
  using std::swap;
  sname_.Swap(&other->sname_);
  log_.Swap(&other->log_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendLog::GetMetadata() const {
  protobuf_log_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_log_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace log
}  // namespace zxtest
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zxtest::log::SendLog* Arena::Create< ::zxtest::log::SendLog >(Arena* arena) {
  return Arena::CreateInternal< ::zxtest::log::SendLog >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
